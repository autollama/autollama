<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AutoLlama Visualizer</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js@3.7.1/dist/chart.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/chartjs-chart-treemap@2.0.1/dist/chartjs-chart-treemap.min.js"></script>
    
    <!-- React Libraries -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Babel to transpile JSX in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    <!-- Chosen Palette: Mempool.space Inspired (Dark blues/grays with green/yellow/blue accents) -->
    <!-- Application Structure Plan: A two-view SPA (Dashboard & File Detail) with a modal for chunk details. The Dashboard provides a high-level overview, while the File view allows deep exploration of a single file's chunk composition via an interactive treemap. This structure directly maps to the user flow described in the source prompt, prioritizing a clear path from overview to detail, which is excellent for data exploration usability. -->
    <!-- Visualization & Content Choices: Report Info: File processing queue -> Goal: Overview -> Viz: Horizontal scrolling list of cards -> Interaction: Click to drill-down -> Justification: Familiar pattern for browsing items. | Report Info: Chunks within a file -> Goal: Show composition and status -> Viz: Treemap Chart -> Interaction: Click chunk to see details -> Justification: Treemaps are ideal for showing part-to-whole relationships and using color/size to encode multiple variables (status/data size). Library: Chart.js with chartjs-chart-treemap plugin (Canvas-based). | Report Info: Chunk details -> Goal: Inspect -> Viz: Modal window -> Interaction: View details, close modal -> Justification: Modals are effective for displaying contextual information without losing the main view's context. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Inter', sans-serif;
            background-color: #0d1117;
        }
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;700&display=swap');
        .file-card-grid {
            scrollbar-width: thin;
            scrollbar-color: #4a5568 #2d3748;
        }
        .file-card-grid::-webkit-scrollbar {
            width: 8px;
        }
        .file-card-grid::-webkit-scrollbar-track {
            background: #2d3748;
            border-radius: 10px;
        }
        .file-card-grid::-webkit-scrollbar-thumb {
            background-color: #4a5568;
            border-radius: 10px;
            border: 2px solid #2d3748;
        }
        .chart-container {
            position: relative;
            width: 100%;
            height: 60vh;
            max-height: 500px;
        }
    </style>
</head>
<body class="text-gray-200">

    <div id="app" class="min-h-screen p-4 sm:p-6 lg:p-8">
        <header class="mb-8 flex items-center justify-between">
            <div>
                <h1 class="text-3xl font-bold text-center text-white">AutoLlama Visualizer</h1>
                <p class="text-center text-gray-400">Visualizing File & Chunk Processing</p>
            </div>
            <div class="flex items-center gap-4">
                <!-- Add New Content Button -->
                <button id="addNewBtn" class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200 flex items-center gap-2">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    New Content
                </button>
                <!-- Settings Button -->
                <button id="settingsBtn" class="bg-gray-700 hover:bg-gray-600 text-white p-2 rounded-lg transition-colors duration-200">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                </button>
            </div>
        </header>

        <!-- Tab Navigation -->
        <nav class="mb-6">
            <div class="flex border-b border-gray-700">
                <button id="dashboard-tab" class="tab-btn px-6 py-3 text-sm font-medium text-white bg-blue-600 border-b-2 border-blue-600">
                    üìä Dashboard
                </button>
            </div>
        </nav>

        <main>
            <!-- Dashboard View -->
            <div id="dashboard-view">
                <div class="mb-8 p-4 bg-gray-800/50 rounded-lg shadow-lg">
                    <h2 class="text-xl font-semibold mb-4 text-white">System Vitals</h2>
                    
                    <!-- Responsive proportional layout -->
                    <div class="grid grid-cols-1 lg:grid-cols-2 gap-4 h-auto">
                        
                        <!-- Left Half: AutoLlama Stats Section -->
                        <div class="p-4 border-2 border-blue-500/30 rounded-lg bg-blue-900/10 flex flex-col">
                            <h3 class="text-lg font-semibold mb-3 text-blue-400 flex items-center gap-2">
                                <span>ü¶ô</span> AutoLlama Stats
                            </h3>
                            <div class="grid grid-cols-2 gap-3 text-center mb-4 flex-grow">
                                <div>
                                    <p class="text-gray-400 text-sm">Queue Depth</p>
                                    <p id="queue-depth" class="text-xl font-bold text-blue-400">0</p>
                                </div>
                                <div>
                                    <p class="text-gray-400 text-sm">Avg. Processing Time</p>
                                    <p id="avg-time" class="text-xl font-bold text-green-400">0s</p>
                                </div>
                                <div>
                                    <p class="text-gray-400 text-sm">Total Chunks</p>
                                    <p id="total-chunks" class="text-xl font-bold text-yellow-400">0</p>
                                </div>
                                <div>
                                    <p class="text-gray-400 text-sm">Total Documents</p>
                                    <p id="total-documents" class="text-xl font-bold text-purple-400">0</p>
                                </div>
                            </div>
                            
                            <!-- Database Statistics Subsection -->
                            <div class="border-t border-blue-500/20 pt-3 mt-auto">
                                <h4 class="text-sm font-medium text-blue-300 mb-2 flex items-center gap-1">
                                    <span>üóÉÔ∏è</span> PostgreSQL Database
                                </h4>
                                <div class="grid grid-cols-2 gap-3 text-center">
                                    <div>
                                        <p class="text-gray-400 text-sm">Total Embeddings</p>
                                        <p id="total-embeddings" class="text-lg font-bold text-cyan-400">0</p>
                                    </div>
                                    <div>
                                        <p class="text-gray-400 text-sm">DB Tables</p>
                                        <p id="db-tables" class="text-lg font-bold text-blue-300">--</p>
                                    </div>
                                    <div>
                                        <p class="text-gray-400 text-sm">Total Records</p>
                                        <p id="db-records" class="text-lg font-bold text-green-300">--</p>
                                    </div>
                                    <div>
                                        <p class="text-gray-400 text-sm">DB Size</p>
                                        <p id="db-size" class="text-lg font-bold text-yellow-300">--</p>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Right Half: Qdrant and Open WebUI stacked -->
                        <div class="flex flex-col gap-4">
                            
                            <!-- Qdrant Stats Section (Top of right half) -->
                            <div class="p-4 border-2 border-green-500/30 rounded-lg bg-green-900/10 flex-1">
                                <h3 class="text-lg font-semibold mb-3 text-green-400 flex items-center gap-2">
                                    <span>üîç</span> Qdrant Vector Database
                                </h3>
                                <div class="grid grid-cols-1 gap-4 text-center h-full">
                                    <div class="flex flex-col justify-center">
                                        <p class="text-gray-400 text-sm mb-1">Total Search Operations</p>
                                        <p id="qdrant-searches" class="text-2xl font-bold text-green-400">--</p>
                                    </div>
                                    <div class="flex flex-col justify-center">
                                        <p class="text-gray-400 text-sm mb-1">Total Query Operations</p>
                                        <p id="qdrant-queries" class="text-2xl font-bold text-green-400">--</p>
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Open WebUI Stats Section (Bottom of right half) -->
                            <div class="p-4 border-2 border-purple-500/30 rounded-lg bg-purple-900/10 flex-1">
                                <h3 class="text-lg font-semibold mb-3 text-purple-400 flex items-center gap-2">
                                    <span>ü§ñ</span> Open WebUI Pipeline
                                </h3>
                                <div class="grid grid-cols-1 gap-4 text-center h-full">
                                    <div class="flex flex-col justify-center">
                                        <p class="text-gray-400 text-sm mb-1">Connection Status</p>
                                        <p id="openwebui-status" class="text-2xl font-bold text-red-400">Checking...</p>
                                    </div>
                                </div>
                            </div>
                            
                        </div>
                        
                    </div>
                </div>
            </div>

            <div id="root"></div>

            <!-- File Detail View -->
            <div id="file-view" class="hidden">
                <button id="back-to-dashboard" class="mb-4 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors duration-200">
                    &larr; Back to Dashboard
                </button>
                <div class="bg-gray-800/50 rounded-lg shadow-lg p-4 sm:p-6">
                    <h2 id="file-view-title" class="text-2xl font-bold mb-1 text-white"></h2>
                    <p id="file-view-status" class="mb-4 text-gray-400"></p>
                    <div class="chart-container mx-auto max-w-4xl mb-6">
                        <canvas id="treemap-canvas"></canvas>
                    </div>
                    <div id="file-stats" class="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4 text-center border-t border-gray-700 pt-4">
                         <div>
                            <p class="text-gray-400 text-sm">Total Chunks</p>
                            <p id="file-total-chunks" class="text-2xl font-bold text-blue-400"></p>
                        </div>
                        <div>
                            <p class="text-gray-400 text-sm">Processing Time</p>
                            <p id="file-processing-time" class="text-2xl font-bold text-green-400"></p>
                        </div>
                        <div>
                            <p class="text-gray-400 text-sm">Context Enhanced</p>
                            <p id="file-context-enhanced" class="text-2xl font-bold text-purple-400"></p>
                        </div>
                        <div>
                            <p class="text-gray-400 text-sm">Processing Chunk</p>
                            <p id="file-processing-chunks" class="text-2xl font-bold text-cyan-400"></p>
                        </div>
                        <div>
                            <p class="text-gray-400 text-sm">Overall Progress</p>
                            <p id="file-overall-progress" class="text-2xl font-bold text-pink-400"></p>
                        </div>
                        <div>
                            <p class="text-gray-400 text-sm">Original Source</p>
                            <p id="file-original-source" class="text-lg font-bold text-orange-400 break-all" title=""></p>
                        </div>
                    </div>
                </div>
            </div>
        </main>
    </div>

    <!-- Chunk Detail Modal -->
    <div id="chunk-modal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-gray-800 rounded-lg shadow-2xl w-full max-w-4xl max-h-[90vh] overflow-hidden flex flex-col">
            <div class="flex justify-between items-center p-6 border-b border-gray-700">
                <h3 id="modal-title" class="text-xl font-bold text-white">Chunk Details</h3>
                <button id="modal-close" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            <div id="modal-content" class="p-6 overflow-y-auto flex-1">
            </div>
        </div>
    </div>

    <!-- Add New Content Modal -->
    <div id="new-content-modal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-gray-800 rounded-lg shadow-2xl w-full max-w-lg p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-white">Add New Content</h3>
                <button id="new-modal-close" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            
            <!-- Content Type Tabs -->
            <div class="flex border-b border-gray-700 mb-4">
                <button id="url-tab" class="px-4 py-2 text-sm font-medium text-white border-b-2 border-blue-500 bg-blue-900/20">
                    üîó URL
                </button>
                <button id="file-tab" class="px-4 py-2 text-sm font-medium text-gray-400 hover:text-white">
                    üìÅ File Upload
                </button>
            </div>
            
            <!-- URL Input Section -->
            <div id="url-section" class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Enter URL</label>
                    <input type="text" id="content-input" 
                           class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-white placeholder-gray-500 focus:outline-none focus:ring-2 focus:ring-blue-500" 
                           placeholder="https://example.com/article">
                </div>
                <div class="text-center text-gray-400 text-sm">
                    <p>Enter a URL to process and analyze</p>
                </div>
            </div>
            
            <!-- File Upload Section -->
            <div id="file-section" class="space-y-4 hidden">
                <!-- Drag and Drop Area -->
                <div id="drop-zone" class="border-2 border-dashed border-gray-600 rounded-lg p-8 text-center bg-gray-900/50 hover:border-blue-500 hover:bg-blue-900/20 transition-colors duration-200 cursor-pointer">
                    <div class="space-y-3">
                        <div class="text-4xl text-gray-500">üìÅ</div>
                        <div>
                            <p class="text-lg font-medium text-white">Drop files here or click to browse</p>
                            <p class="text-sm text-gray-400">Supports PDF, DOCX, EPUB, TXT, CSV files up to 500MB</p>
                        </div>
                        <input type="file" id="file-input" class="hidden" accept=".pdf,.docx,.doc,.epub,.txt,.csv,.html">
                    </div>
                </div>
                
                <!-- Selected File Display -->
                <div id="selected-file" class="hidden p-3 bg-gray-900/50 border border-gray-700 rounded-lg">
                    <div class="flex items-center justify-between">
                        <div class="flex items-center gap-3">
                            <div class="text-2xl">üìÑ</div>
                            <div>
                                <p id="file-name" class="text-white font-medium"></p>
                                <p id="file-size" class="text-sm text-gray-400"></p>
                            </div>
                        </div>
                        <button id="remove-file" class="text-red-400 hover:text-red-300 text-xl">&times;</button>
                    </div>
                </div>
            </div>
                
                <!-- Processing Status -->
                <div id="modal-status" class="hidden p-3 bg-blue-900/20 border border-blue-700 rounded-lg">
                    <div class="flex items-center gap-3">
                        <div class="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-500"></div>
                        <span id="modal-status-text" class="text-sm text-blue-200">Processing...</span>
                    </div>
                </div>
                
                <!-- Progress Display -->
                <div id="modal-progress" class="hidden space-y-3">
                    <div class="bg-gray-900 rounded-lg p-3">
                        <div class="flex justify-between text-sm mb-2">
                            <span class="text-gray-400">Progress</span>
                            <span id="modal-progress-percent" class="text-gray-400">0%</span>
                        </div>
                        <div class="w-full bg-gray-700 rounded-full h-2">
                            <div id="modal-progress-bar" class="bg-blue-600 h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
                        </div>
                    </div>
                    <div id="modal-progress-steps" class="max-h-32 overflow-y-auto space-y-1 text-sm text-blue-200 bg-gray-900/50 rounded-lg p-2">
                    </div>
                </div>
                
                <div class="flex gap-3">
                    <button id="cancel-btn" class="flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-medium transition-colors">
                        Cancel
                    </button>
                    <button id="process-btn" class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
                        Process
                    </button>
                </div>
            </div>
        </div>
    </div>

    <!-- Settings Modal -->
    <div id="settings-modal" class="fixed inset-0 bg-black bg-opacity-70 flex items-center justify-center p-4 hidden z-50">
        <div class="bg-gray-800 rounded-lg shadow-2xl w-full max-w-md p-6">
            <div class="flex justify-between items-center mb-4">
                <h3 class="text-xl font-bold text-white">Settings</h3>
                <button id="settings-modal-close" class="text-gray-400 hover:text-white text-2xl">&times;</button>
            </div>
            <div class="space-y-4">
                <div>
                    <label class="block text-sm font-medium text-gray-300 mb-2">Refresh Interval</label>
                    <select id="refresh-interval" class="w-full px-3 py-2 bg-gray-900 border border-gray-700 rounded-lg text-white focus:outline-none focus:ring-2 focus:ring-blue-500">
                        <option value="1000">1 second</option>
                        <option value="2000" selected>2 seconds</option>
                        <option value="5000">5 seconds</option>
                        <option value="10000">10 seconds</option>
                    </select>
                </div>
                <div>
                    <label class="flex items-center gap-2 text-sm font-medium text-gray-300">
                        <input type="checkbox" id="auto-refresh" checked class="rounded bg-gray-900 border-gray-700 text-blue-600">
                        Auto-refresh data
                    </label>
                </div>
                <div>
                    <label class="flex items-center gap-2 text-sm font-medium text-gray-300">
                        <input type="checkbox" id="show-animations" checked class="rounded bg-gray-900 border-gray-700 text-blue-600">
                        Show animations
                    </label>
                </div>
                <div class="flex gap-3 pt-4">
                    <button id="settings-cancel" class="flex-1 px-4 py-2 bg-gray-700 hover:bg-gray-600 text-white rounded-lg font-medium transition-colors">
                        Cancel
                    </button>
                    <button id="settings-save" class="flex-1 px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg font-medium transition-colors">
                        Save
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script type="text/babel">
        const { useState, useMemo, useEffect } = React;
        // --- MOCK DATA GENERATION ---
        const generateMockData = () => {
            const sources = ['FILE_UPLOAD', 'URL_PASTE', 'N8N_WEBHOOK'];
            const topics = ['AI Ethics', 'Corporate Finance', 'Web Development', 'Quantum Computing', 'Medical Research', 'History', 'Productivity'];
            const fileNames = ['Q2_Report.pdf', 'research_paper.docx', 'project_brief.pdf', 'legal_document.pdf'];
            const urls = ['https://www.theverge.com/2023/10/26/23933423/ai-image-generation-midjourney-dalle-3-stability-ai', 'https://react.dev/learn', 'https://www.nature.com/articles/d41586-023-03276-8'];
            const n8nWorkflows = ['Perplexity Research', 'Daily News Briefing', 'Market Analysis'];

            let transactions = [];
            for (let i = 0; i < 25; i++) {
                const source = sources[Math.floor(Math.random() * sources.length)];
                const timestamp = new Date(Date.now() - Math.random() * 30 * 24 * 60 * 60 * 1000).toISOString();
                const docCount = source === 'N8N_WEBHOOK' ? Math.floor(Math.random() * 10) + 2 : 1;
                const totalChunks = Math.floor(Math.random() * 200) + (docCount * 15);

                let transactionTitle = '';
                if (source === 'FILE_UPLOAD') transactionTitle = fileNames[Math.floor(Math.random() * fileNames.length)];
                if (source === 'URL_PASTE') transactionTitle = urls[Math.floor(Math.random() * urls.length)];
                if (source === 'N8N_WEBHOOK') transactionTitle = n8nWorkflows[Math.floor(Math.random() * n8nWorkflows.length)];

                transactions.push({
                    transaction_id: `txn_${Math.random().toString(36).substr(2, 9)}`,
                    source: source,
                    title: transactionTitle,
                    timestamp: timestamp,
                    document_count: docCount,
                    total_chunks: totalChunks,
                    main_topics: [topics[Math.floor(Math.random() * topics.length)], topics[Math.floor(Math.random() * topics.length)]].filter((v, i, a) => a.indexOf(v) === i),
                    status: 'completed'
                });
            }
            return transactions;
        };

        // --- ICONS ---
        const SourceIcon = ({ source }) => {
            const icons = {
                FILE_UPLOAD: ( React.createElement('svg', {xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 text-blue-400", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor"}, React.createElement('path', {strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"})) ),
                URL_PASTE: ( React.createElement('svg', {xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 text-green-400", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor"}, React.createElement('path', {strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M13.828 10.172a4 4 0 00-5.656 0l-4 4a4 4 0 105.656 5.656l1.102-1.101m-.758-4.899a4 4 0 005.656 0l4-4a4 4 0 00-5.656-5.656l-1.1 1.1"})) ),
                N8N_WEBHOOK: ( React.createElement('svg', {xmlns: "http://www.w3.org/2000/svg", className: "h-5 w-5 text-purple-400", fill: "none", viewBox: "0 0 24 24", stroke: "currentColor"}, React.createElement('path', {strokeLinecap: "round", strokeLinejoin: "round", strokeWidth: 2, d: "M8 9l4-4 4 4m0 6l-4 4-4-4"})) )
            };
            return icons[source] || null;
        };

        // --- HELPERS ---
        const formatSourceText = (source) => {
            return source.split('_').map(word => word.charAt(0).toUpperCase() + word.slice(1).toLowerCase()).join(' ');
        };
        // --- COMPONENTS ---
        const FilterBar = ({ activeSource, setActiveSource, activeSort, setActiveSort, activeTopic, clearTopicFilter }) => {
            const sources = ['ALL', 'FILE_UPLOAD', 'URL_PASTE', 'N8N_WEBHOOK'];
            const sorts = ['Newest', 'Size', 'Topics'];
            return (
                React.createElement('div', {className: "flex flex-col gap-4 mb-6 px-1"},
                    React.createElement('div', {className: "flex flex-col sm:flex-row justify-between items-center"},
                        React.createElement('div', {className: "flex items-center gap-2 mb-4 sm:mb-0"},
                            React.createElement('span', {className: "text-sm text-gray-400"}, "Filter by Source:"),
                            React.createElement('div', {className: "bg-gray-800 p-1 rounded-lg flex gap-1"},
                                sources.map(source =>
                                    React.createElement('button', {
                                        key: source,
                                        onClick: () => setActiveSource(source),
                                        className: `px-3 py-1 text-sm rounded-md transition-colors ${activeSource === source ? 'bg-blue-600 text-white shadow-sm' : 'text-gray-300 hover:bg-gray-700'}`
                                    }, formatSourceText(source))
                                )
                            )
                        ),
                        React.createElement('div', {className: "flex items-center gap-2"},
                            React.createElement('span', {className: "text-sm text-gray-400"}, "Sort by:"),
                            React.createElement('div', {className: "bg-gray-800 p-1 rounded-lg flex gap-1"},
                                sorts.map(sort =>
                                    React.createElement('button', {
                                        key: sort,
                                        onClick: () => setActiveSort(sort),
                                        className: `px-3 py-1 text-sm rounded-md transition-colors ${activeSort === sort ? 'bg-blue-600 text-white shadow-sm' : 'text-gray-300 hover:bg-gray-700'}`
                                    }, sort)
                                )
                            )
                        )
                    ),
                    activeTopic !== 'ALL' && 
                        React.createElement('div', {className: "flex justify-center items-center"},
                            React.createElement('div', {className: "bg-gray-800 p-1 rounded-lg flex gap-2 items-center text-sm text-gray-300 px-3"},
                                React.createElement('span', {}, "Filtering on topic: ", React.createElement('span', {className: "font-semibold text-white"}, activeTopic)),
                                React.createElement('button', {onClick: clearTopicFilter, className: "text-gray-500 hover:text-white text-lg"}, "√ó")
                            )
                        )
                )
            );
        };


        const TransactionCard = ({ transaction, onTopicClick, onChunksClick }) => {
            const { source, title, timestamp, document_count, total_chunks, main_topics } = transaction;
            const sourceDisplay = { FILE_UPLOAD: 'File Upload', URL_PASTE: 'URL Paste', N8N_WEBHOOK: 'N8N Webhook' };
            const timeAgo = (date) => {
                const seconds = Math.floor((new Date() - new Date(date)) / 1000);
                let interval = seconds / 31536000;
                if (interval > 1) return Math.floor(interval) + " years ago";
                interval = seconds / 2592000;
                if (interval > 1) return Math.floor(interval) + " months ago";
                interval = seconds / 86400;
                if (interval > 1) return Math.floor(interval) + " days ago";
                interval = seconds / 3600;
                if (interval > 1) return Math.floor(interval) + " hours ago";
                interval = seconds / 60;
                if (interval > 1) return Math.floor(interval) + " minutes ago";
                return "Just now";
            };
            return (
                React.createElement('div', {className: "bg-gray-800/50 border border-gray-700/50 rounded-lg p-4 flex flex-col gap-3 hover:bg-gray-800/80 hover:border-blue-500/50 transition-all duration-200"},
                    React.createElement('div', {className: "flex justify-between items-start"},
                        React.createElement('div', {className: "flex items-center gap-3"},
                            React.createElement(SourceIcon, {source: source}),
                            React.createElement('div', {},
                                React.createElement('p', {className: "font-semibold text-white truncate", title: title}, title),
                                React.createElement('p', {className: "text-xs text-gray-400"}, sourceDisplay[source])
                            )
                        ),
                        React.createElement('p', {className: "text-xs text-gray-500 flex-shrink-0"}, timeAgo(timestamp))
                    ),
                    
                    // Filter out test documents and process completed documents
                    const filteredRecentData = recentData.filter(doc => {
                        const title = (doc.title || '').toLowerCase();
                        const url = (doc.url || '').toLowerCase();
                        
                        // Filter out test documents
                        return !title.includes('test content') && 
                               !title.includes('example domain') && 
                               !url.includes('example.com') &&
                               !title.includes('bibliography') && // Filter out academic bibliography entries that might be incomplete
                               title.length > 3; // Filter out very short titles
                    });
                    
                    const completedDocuments = filteredRecentData.map(doc => ({
                        id: doc.id,
                        title: doc.title || doc.url || 'Unknown Document',
                        url: doc.url,
                        status: doc.processing_status || 'completed',
                        createdTime: doc.created_time || doc.createdTime,
                        processedDate: doc.processed_date || doc.processedDate,
                        chunkCount: doc.chunk_count || 0,
                        category: doc.category,
                        summary: doc.summary,
                        contentType: doc.content_type || doc.contentType,
                        technicalLevel: doc.technical_level || doc.technicalLevel,
                        usesContextualEmbedding: doc.uses_contextual_embedding || false,
                        sentiment: doc.sentiment,
                        mainTopics: doc.main_topics || doc.mainTopics || [],
                        keyEntities: doc.key_entities || doc.keyEntities || {},
                        tags: doc.tags,
                        chunkCount: 0, // Will be calculated dynamically for completed documents
                        // Add these two new properties for sorting:
                        rating: Math.floor(Math.random() * 5) + 1, // Mock rating: 1 to 5
                        size: doc.chunk_count || 0 // Explicit size property
                    }));
                    
                    // Process in-progress documents
                    const inProgressDocuments = inProgressData.map(session => {
                        // Determine if this is a URL or file upload
                        const isUrl = session.url && (session.url.startsWith('http://') || session.url.startsWith('https://'));
                        const isFile = session.url && session.url.startsWith('file://');
                        
                        // Track start time for elapsed time calculation
                        if (!appState.processingStartTimes[session.id]) {
                            appState.processingStartTimes[session.id] = new Date(session.createdAt);
                        }
                        
                        return {
                            id: session.id,
                            title: session.title || session.filename || (isUrl ? session.url : 'Processing...'),
                            url: session.url,
                            status: 'processing',
                            createdTime: session.createdAt,
                            processedDate: session.lastActivity,
                            chunkCount: session.totalChunks || 0,
                            processedChunks: session.processedChunks || 0,
                            currentProcessingChunk: (session.processedChunks || 0) + 1, // The chunk currently being processed
                            progress: Math.round((session.processedChunks || 0) / (session.totalChunks || 1) * 100),
                            category: isUrl ? 'URL Processing' : (isFile ? 'File Upload' : 'Processing'),
                            summary: `Processing ${session.processedChunks || 0} of ${session.totalChunks || 0} chunks...`,
                            contentType: isUrl ? 'url' : 'file',
                            technicalLevel: 'intermediate',
                            usesContextualEmbedding: true,
                            sentiment: 'neutral',
                            mainTopics: [],
                            keyEntities: {},
                            tags: isUrl ? 'processing, url' : 'processing, upload'
                        };
                    });
                    
                    // Combine and sort by creation time (in-progress first, then most recent)
                    documents = [...inProgressDocuments, ...completedDocuments].sort((a, b) => {
                        // Processing documents first
                        if (a.status === 'processing' && b.status !== 'processing') return -1;
                        if (b.status === 'processing' && a.status !== 'processing') return 1;
                        
                        // Then by creation time (most recent first)
                        return new Date(b.createdTime) - new Date(a.createdTime);
                    });
                    
                    // Calculate chunk counts for completed documents (this could be optimized with an API change)
                    await calculateChunkCounts(completedDocuments);
                    
                    console.log(`‚úÖ Loaded ${documents.length} documents (${inProgressDocuments.length} processing, ${completedDocuments.length} completed)`);
                    console.log('üìã Active processing:', inProgressDocuments.map(d => ({ title: d.title, progress: d.progress + '%', chunks: `${d.processedChunks}/${d.chunkCount}` })));
                    renderDashboard();
                    
                } catch (error) {
                    console.error('‚ùå Error loading documents:', error);
                    // Fallback to empty state
                    documents = [];
                    renderDashboard();
                }
            }
            
            // Calculate chunk counts for completed documents
            async function calculateChunkCounts(completedDocuments) {
                console.log('üî¢ Calculating chunk counts for completed documents...');
                
                // Process in batches to avoid overwhelming the API
                const batchSize = 5;
                for (let i = 0; i < completedDocuments.length; i += batchSize) {
                    const batch = completedDocuments.slice(i, i + batchSize);
                    
                    const chunkPromises = batch.map(async (doc) => {
                        try {
                            const encodedUrl = encodeURIComponent(doc.url);
                            const response = await fetch(`/api/document/${encodedUrl}/chunks?limit=1`);
                            if (response.ok) {
                                const data = await response.json();
                                const chunkCount = data.pagination?.totalChunks || 0;
                                
                                // Update the document object
                                const docInArray = documents.find(d => d.id === doc.id);
                                if (docInArray) {
                                    docInArray.chunkCount = chunkCount;
                                }
                                
                                return { id: doc.id, chunkCount };
                            }
                        } catch (error) {
                            console.warn(`Failed to get chunk count for ${doc.title}:`, error);
                            return { id: doc.id, chunkCount: 0 };
                        }
                    });
                    
                    await Promise.all(chunkPromises);
                    
                    // Small delay between batches to be nice to the API
                    if (i + batchSize < completedDocuments.length) {
                        await new Promise(resolve => setTimeout(resolve, 100));
                    }
                }
                
                console.log('‚úÖ Chunk counts calculated');
            }
            
            // Load chunks for processing documents - creates visualization of all planned chunks
            async function loadProcessingDocumentChunks(document) {
                try {
                    console.log(`üîÑ Creating real-time chunk visualization for processing document: ${document.title}`);
                    
                    const totalChunks = document.chunkCount || 0;
                    const processedChunks = document.processedChunks || 0;
                    const currentProcessingChunk = processedChunks + 1; // Next chunk being processed
                    
                    console.log(`üìä Generating ${totalChunks} chunk placeholders (${processedChunks} completed, ${currentProcessingChunk} processing)`);
                    
                    // Generate chunk objects for visualization
                    const chunks = [];
                    for (let i = 0; i < totalChunks; i++) {
                        const chunkIndex = i + 1;
                        let chunkStatus = 'pending';
                        let chunkColor = 'gray';
                        
                        if (chunkIndex <= processedChunks) {
                            chunkStatus = 'completed';
                            chunkColor = 'green';
                        } else if (chunkIndex === currentProcessingChunk) {
                            chunkStatus = 'processing';
                            chunkColor = 'yellow';
                        }
                        
                        chunks.push({
                            id: `${document.id}-chunk-${chunkIndex}`,
                            index: i,
                            size: Math.floor(Math.random() * 1000) + 500, // Random size for visualization
                            status: chunkStatus,
                            color: chunkColor,
                            content: chunkStatus === 'completed' ? `Chunk ${chunkIndex} (Completed)` : 
                                    chunkStatus === 'processing' ? `Chunk ${chunkIndex} (Processing...)` :
                                    `Chunk ${chunkIndex} (Pending)`,
                            summary: chunkStatus === 'completed' ? `This chunk has been successfully processed and analyzed.` :
                                    chunkStatus === 'processing' ? `This chunk is currently being processed...` :
                                    `This chunk is waiting to be processed.`,
                            contextualSummary: chunkStatus === 'completed' ? `Contextual analysis completed for chunk ${chunkIndex}` : null,
                            category: chunkStatus === 'completed' ? document.category || 'Processed Content' : 
                                     chunkStatus === 'processing' ? 'Currently Processing' : 'Pending Processing',
                            sentiment: chunkStatus === 'completed' ? 'positive' : 'neutral',
                            mainTopics: chunkStatus === 'completed' ? ['processed', 'analyzed'] : ['pending'],
                            emotions: chunkStatus === 'completed' ? ['trust', 'anticipation'] : [],
                            keyEntities: { people: [], locations: [], organizations: [] },
                            // Real-time processing info
                            processingProgress: Math.round((chunkIndex / totalChunks) * 100),
                            isCurrentlyProcessing: chunkStatus === 'processing',
                            estimatedTimeRemaining: chunkStatus === 'pending' ? `~${Math.max(0, (totalChunks - chunkIndex) * 3)} seconds` : null
                        });
                    }
                    
                    console.log(`‚úÖ Generated ${chunks.length} chunk visualization objects`);
                    console.log(`üéØ Current processing: Chunk ${currentProcessingChunk}/${totalChunks}`);
                    
                    return chunks;
                    
                } catch (error) {
                    console.error('‚ùå Error creating processing document visualization:', error);
                    return [];
                }
            }

            // Load ALL chunks for a specific document (handles pagination and processing documents)
            async function loadDocumentChunks(document) {
                try {
                    console.log(`üì° Loading chunks for: ${document.title} (Status: ${document.status})`);
                    
                    // Special handling for processing documents
                    if (document.status === 'processing') {
                        return await loadProcessingDocumentChunks(document);
                    }
                    
                    // Standard handling for completed documents
                    const encodedUrl = encodeURIComponent(document.url);
                    console.log(`üì° Loading ALL completed chunks for: ${document.title}`);
                    
                    // First, get the first page to understand pagination
                    const firstResponse = await fetch(`/api/document/${encodedUrl}/chunks?limit=100&page=1`);
                    if (!firstResponse.ok) throw new Error('Failed to load chunks');
                    
                    const firstData = await firstResponse.json();
                    const totalPages = firstData.pagination.totalPages;
                    const totalChunks = firstData.pagination.totalChunks;
                    
                    console.log(`üìä Document has ${totalChunks} chunks across ${totalPages} pages`);
                    
                    let allChunks = [...firstData.chunks];
                    
                    // If there are more pages and reasonable number of chunks, fetch them all
                    if (totalPages > 1 && totalChunks <= 500) { // Limit to 500 chunks for performance
                        const fetchPromises = [];
                        
                        // Create promises for remaining pages
                        for (let page = 2; page <= Math.min(totalPages, 5); page++) { // Max 5 pages (500 chunks)
                            fetchPromises.push(
                                fetch(`/api/document/${encodedUrl}/chunks?limit=100&page=${page}`)
                                    .then(res => res.json())
                                    .then(data => data.chunks)
                            );
                        }
                        
                        // Fetch all pages in parallel
                        const additionalChunks = await Promise.all(fetchPromises);
                        allChunks = allChunks.concat(...additionalChunks);
                        
                        console.log(`‚úÖ Loaded ${allChunks.length} chunks from ${Math.min(totalPages, 5)} pages`);
                    } else if (totalChunks > 500) {
                        console.log(`‚ö†Ô∏è Document has ${totalChunks} chunks, limiting to first 500 for performance`);
                    }
                    
                    // Transform chunks to our format
                    return allChunks.map(chunk => ({
                        id: chunk.chunkId || chunk.id,
                        index: chunk.chunkIndex || 0,
                        size: chunk.chunkText ? chunk.chunkText.length : Math.floor(Math.random() * 2000) + 500, // Chunk text length
                        status: 'completed', // Most chunks in DB are completed
                        content: chunk.chunkText || chunk.content || '',
                        summary: chunk.summary || '',
                        contextualSummary: chunk.contextual_summary || null,
                        title: chunk.title || `Chunk ${chunk.chunkIndex + 1}`,
                        category: chunk.category || 'General',
                        sentiment: chunk.sentiment || 'neutral',
                        emotions: chunk.emotions || [],
                        technicalLevel: chunk.technicalLevel || 'intermediate',
                        mainTopics: chunk.mainTopics || [],
                        keyEntities: chunk.keyEntities || {},
                        tags: chunk.tags || '',
                        embeddingStatus: chunk.embeddingStatus || 'complete',
                        processingStatus: chunk.processingStatus || 'completed',
                        createdTime: chunk.createdTime,
                        processedDate: chunk.processedDate,
                        log: `Chunk ${chunk.chunkIndex + 1}: Successfully processed and embedded with ${chunk.contextual_summary ? 'contextual' : 'standard'} embedding.`
                    }));
                    
                } catch (error) {
                    console.error('‚ùå Error loading chunks:', error);
                    return [];
                }
            }

            const dashboardView = document.getElementById('dashboard-view');
            const fileView = document.getElementById('file-view');
            const backToDashboardBtn = document.getElementById('back-to-dashboard');

            function switchView(viewName, docId = null) {
                appState.currentView = viewName;
                appState.selectedDocument = docId;

                if (viewName === 'dashboard') {
                    dashboardView.classList.remove('hidden');
                    fileView.classList.add('hidden');
                    if (treemapChart) {
                        treemapChart.destroy();
                        treemapChart = null;
                    }
                    // Stop real-time updates when leaving file view
                    stopRealTimeTreemapUpdates();
                } else if (viewName === 'file') {
                    dashboardView.classList.add('hidden');
                    fileView.classList.remove('hidden');
                    renderFileView(docId);
                }
            }

            function formatTimeAgo(date) {
                const seconds = Math.floor((new Date() - date) / 1000);
                let interval = seconds / 31536000;
                if (interval > 1) return Math.floor(interval) + " years ago";
                interval = seconds / 2592000;
                if (interval > 1) return Math.floor(interval) + " months ago";
                interval = seconds / 86400;
                if (interval > 1) return Math.floor(interval) + " days ago";
                interval = seconds / 3600;
                if (interval > 1) return Math.floor(interval) + " hours ago";
                interval = seconds / 60;
                if (interval > 1) return Math.floor(interval) + " minutes ago";
                return Math.floor(seconds) + " seconds ago";
            }
            
            function formatElapsedTime(startTime) {
                const elapsed = Math.floor((new Date() - startTime) / 1000);
                const hours = Math.floor(elapsed / 3600);
                const minutes = Math.floor((elapsed % 3600) / 60);
                const seconds = elapsed % 60;
                
                if (hours > 0) {
                    return `${hours}h ${minutes}m ${seconds}s`;
                } else if (minutes > 0) {
                    return `${minutes}m ${seconds}s`;
                } else {
                    return `${seconds}s`;
                }
            }
            
            function extractOriginalSource(url) {
                if (!url) {
                    return { displayName: 'Unknown', fullPath: 'Unknown source' };
                }
                
                // Handle file:// URLs (uploaded files)
                if (url.startsWith('file://')) {
                    const filePath = decodeURIComponent(url.replace('file://', ''));
                    const fileName = filePath.split('/').pop() || filePath;
                    
                    // Extract file extension
                    const fileExtension = fileName.split('.').pop().toUpperCase();
                    
                    // Shorten very long filenames for display
                    let displayName = fileName;
                    if (fileName.length > 25) {
                        const nameWithoutExt = fileName.substring(0, fileName.lastIndexOf('.'));
                        const ext = fileName.substring(fileName.lastIndexOf('.'));
                        displayName = nameWithoutExt.substring(0, 20) + '...' + ext;
                    }
                    
                    return {
                        displayName: `${displayName} (${fileExtension})`,
                        fullPath: filePath
                    };
                }
                
                // Handle HTTP/HTTPS URLs (web scrapes)
                if (url.startsWith('http://') || url.startsWith('https://')) {
                    try {
                        const urlObj = new URL(url);
                        const domain = urlObj.hostname;
                        const pathname = urlObj.pathname;
                        
                        // Extract meaningful part of the path
                        let displayPath = pathname;
                        if (pathname.length > 30) {
                            displayPath = '...' + pathname.substring(pathname.length - 25);
                        }
                        
                        return {
                            displayName: `${domain}${displayPath} (WEB)`,
                            fullPath: url
                        };
                    } catch (e) {
                        return {
                            displayName: url.length > 30 ? url.substring(0, 27) + '... (WEB)' : url + ' (WEB)',
                            fullPath: url
                        };
                    }
                }
                
                // Fallback for other URL types
                return {
                    displayName: url.length > 30 ? url.substring(0, 27) + '...' : url,
                    fullPath: url
                };
            }
            
            function formatRagActivityTime(date) {
                const now = new Date();
                const diffMs = now - date;
                const diffSeconds = Math.floor(diffMs / 1000);
                const diffMinutes = Math.floor(diffSeconds / 60);
                const diffHours = Math.floor(diffMinutes / 60);
                const diffDays = Math.floor(diffHours / 24);
                const diffWeeks = Math.floor(diffDays / 7);
                const diffMonths = Math.floor(diffDays / 30);
                const diffYears = Math.floor(diffDays / 365);
                
                if (diffSeconds < 30) return 'just now';
                if (diffSeconds < 60) return `${diffSeconds} seconds ago`;
                if (diffMinutes === 1) return '1 minute ago';
                if (diffMinutes < 60) return `${diffMinutes} minutes ago`;
                if (diffHours === 1) return '1 hour ago';
                if (diffHours < 24) return `${diffHours} hours ago`;
                if (diffDays === 1) return 'yesterday';
                if (diffDays < 7) return `${diffDays} days ago`;
                if (diffWeeks === 1) return 'last week';
                if (diffWeeks < 4) return `${diffWeeks} weeks ago`;
                if (diffMonths === 1) return 'last month';
                if (diffMonths < 12) return `${diffMonths} months ago`;
                if (diffYears === 1) return 'last year';
                return `${diffYears} years ago`;
            }
            
            async function checkOpenWebUIStatus() {
                try {
                    const statusElement = document.getElementById('openwebui-status');
                    
                    // Set checking state
                    statusElement.textContent = 'Checking...';
                    statusElement.className = 'text-lg font-bold text-yellow-400';
                    
                    const response = await fetch('/api/pipeline/health');
                    const data = await response.json();
                    
                    if (response.ok && data.success && data.status === 'healthy') {
                        statusElement.textContent = 'Ready';
                        statusElement.className = 'text-lg font-bold text-green-400';
                    } else {
                        statusElement.textContent = 'Offline';
                        statusElement.className = 'text-lg font-bold text-red-400';
                    }
                } catch (error) {
                    console.error('Failed to check Open WebUI status:', error);
                    const statusElement = document.getElementById('openwebui-status');
                    statusElement.textContent = 'Error';
                    statusElement.className = 'text-lg font-bold text-red-400';
                }
            }

            async function updateQdrantStats() {
                try {
                    const searchElement = document.getElementById('qdrant-searches');
                    const queryElement = document.getElementById('qdrant-queries');
                    
                    // Set loading state
                    searchElement.textContent = '...';
                    queryElement.textContent = '...';
                    
                    const response = await fetch('/api/qdrant/activity');
                    const data = await response.json();
                    
                    if (response.ok && data.success && data.qdrant) {
                        // Extract search and query operations from telemetry
                        const totalSearches = data.qdrant.totalSearches || 0;
                        
                        // Based on Qdrant telemetry, we show the total searches
                        // For now, we'll display total searches and assume most are search operations
                        searchElement.textContent = totalSearches.toLocaleString();
                        
                        // Query operations are typically fewer in RAG systems
                        // We'll show a conservative estimate or 1 if there are searches
                        const estimatedQueries = Math.max(1, Math.floor(totalSearches * 0.05));
                        queryElement.textContent = estimatedQueries.toLocaleString();
                    } else {
                        searchElement.textContent = '--';
                        queryElement.textContent = '--';
                        console.warn('Failed to fetch Qdrant stats:', data.error || 'Unknown error');
                    }
                } catch (error) {
                    console.error('Error fetching Qdrant stats:', error);
                    document.getElementById('qdrant-searches').textContent = '--';
                    document.getElementById('qdrant-queries').textContent = '--';
                }
            }

            async function updateDatabaseStats() {
                try {
                    const tablesElement = document.getElementById('db-tables');
                    const recordsElement = document.getElementById('db-records');
                    const sizeElement = document.getElementById('db-size');
                    
                    // Set loading state
                    tablesElement.textContent = '...';
                    recordsElement.textContent = '...';
                    sizeElement.textContent = '...';
                    
                    const response = await fetch('/api/database/stats');
                    const data = await response.json();
                    
                    if (response.ok && data.success && data.database) {
                        tablesElement.textContent = data.database.totalTables.toLocaleString();
                        recordsElement.textContent = data.database.totalRecords.toLocaleString();
                        sizeElement.textContent = data.database.size;
                        
                        console.log('üìä Database Stats Updated:', {
                            tables: data.database.totalTables,
                            records: data.database.totalRecords,
                            size: data.database.size
                        });
                    } else {
                        tablesElement.textContent = '--';
                        recordsElement.textContent = '--';
                        sizeElement.textContent = '--';
                        console.warn('Failed to fetch database stats:', data.error || 'Unknown error');
                    }
                } catch (error) {
                    console.error('Error fetching database stats:', error);
                    document.getElementById('db-tables').textContent = '--';
                    document.getElementById('db-records').textContent = '--';
                    document.getElementById('db-size').textContent = '--';
                }
            }

            function renderDashboard() {
                // Only render system stats - no document grids on dashboard tab
                const processingDocuments = documents.filter(doc => doc.status === 'processing');
                
                // Update stats
                document.getElementById('queue-depth').textContent = processingDocuments.length;
                document.getElementById('total-documents').textContent = documents.length.toLocaleString();
                
                // Update other stats
                checkOpenWebUIStatus();
                updateQdrantStats();
                updateDatabaseStats();
            }

            
            
            async function renderFileView(docId) {
                const doc = documents.find(d => d.id === docId);
                if (!doc) return;

                console.log(`üéØ Rendering file view for: ${doc.title}`);
                
                // Update document info
                document.getElementById('file-view-title').textContent = doc.title;
                document.getElementById('file-view-status').textContent = `Status: ${doc.status}`;
                
                // Show loading state with progress
                const canvas = document.getElementById('treemap-canvas');
                const ctx = canvas.getContext('2d');
                ctx.clearRect(0, 0, canvas.width, canvas.height);
                ctx.fillStyle = '#6B7280';
                ctx.font = '16px Inter';
                ctx.textAlign = 'center';
                ctx.fillText('Loading chunks...', canvas.width / 2, canvas.height / 2 - 10);
                ctx.font = '12px Inter';
                ctx.fillText('This may take a moment for large documents', canvas.width / 2, canvas.height / 2 + 15);
                
                // Load chunks for this document (different approach for processing vs completed)
                const chunks = await loadDocumentChunks(doc);
                
                // Update stats with real chunk data
                const totalChunks = chunks.length;
                const processingChunks = chunks.filter(c => c.status === 'processing').length;
                const contextEnhancedChunks = chunks.filter(c => c.contextualSummary).length;
                const overallProgress = doc.status === 'completed' ? 100 : Math.floor((chunks.filter(c => c.status === 'completed').length / totalChunks) * 100);

                // Calculate processing time or elapsed time
                let processingTimeText = 'N/A';
                if (doc.status === 'processing' && appState.processingStartTimes[doc.id]) {
                    processingTimeText = formatElapsedTime(appState.processingStartTimes[doc.id]);
                } else if (doc.status === 'completed' && doc.createdTime && doc.processedDate) {
                    const processingDuration = new Date(doc.processedDate) - new Date(doc.createdTime);
                    processingTimeText = formatElapsedTime(new Date() - processingDuration);
                }

                document.getElementById('file-total-chunks').textContent = totalChunks.toLocaleString();
                document.getElementById('file-processing-time').textContent = processingTimeText;
                document.getElementById('file-context-enhanced').textContent = contextEnhancedChunks > 0 ? `${contextEnhancedChunks}/${totalChunks}` : 'No';
                document.getElementById('file-processing-chunks').textContent = doc.currentProcessingChunk || processingChunks.toString();
                document.getElementById('file-overall-progress').textContent = `${overallProgress}%`;
                
                // Extract and display original source information
                const sourceInfo = extractOriginalSource(doc.url);
                const sourceElement = document.getElementById('file-original-source');
                sourceElement.textContent = sourceInfo.displayName;
                sourceElement.title = sourceInfo.fullPath;

                // Create treemap if we have chunks
                if (chunks.length > 0) {
                    console.log(`üó∫Ô∏è Creating treemap with ${chunks.length} chunks`);
                    createTreemap(chunks);
                    
                    // Start real-time updates for processing documents
                    if (doc.status === 'processing') {
                        console.log(`üîÑ Starting real-time updates for processing document: ${doc.title}`);
                        startRealTimeTreemapUpdates(doc.id);
                    }
                } else {
                    // Show message if no chunks
                    ctx.clearRect(0, 0, canvas.width, canvas.height);
                    ctx.fillStyle = '#6B7280';
                    ctx.font = '16px Inter';
                    ctx.textAlign = 'center';
                    ctx.fillText('No chunks available for this document', canvas.width / 2, canvas.height / 2);
                }
            }

            function createTreemap(chunks) {
                const ctx = document.getElementById('treemap-canvas').getContext('2d');
                
                // Destroy existing chart
                if (treemapChart) {
                    treemapChart.destroy();
                }

                console.log(`üó∫Ô∏è Creating treemap with ${chunks.length} individual chunks`);
                
                // Enhanced color mapping - prioritize processing status for real-time visualization
                const getCategoryColor = (chunk) => {
                    // First check for processing status (for real-time visualization)
                    if (chunk.status === 'processing' || chunk.isCurrentlyProcessing) {
                        return 'rgba(255, 193, 7, 0.95)'; // Bright yellow/gold for currently processing
                    }
                    
                    if (chunk.status === 'pending') {
                        return 'rgba(108, 117, 125, 0.4)'; // Muted gray for pending
                    }
                    
                    if (chunk.status === 'completed') {
                        // For completed chunks, use green with category-based saturation
                        const categoryColors = {
                            'Religious Text': 'rgba(40, 167, 69, 0.8)', // Green
                            'Religious Studies': 'rgba(40, 167, 69, 0.8)',
                            'Biblical Studies': 'rgba(25, 135, 84, 0.8)', // Darker green
                            'History': 'rgba(32, 201, 151, 0.8)', // Teal green
                            'Historical Literature': 'rgba(32, 201, 151, 0.8)',
                            'Philosophy': 'rgba(13, 202, 240, 0.8)', // Cyan green
                            'Literature': 'rgba(25, 135, 84, 0.8)', // Forest green
                            'General Interest': 'rgba(40, 167, 69, 0.6)', // Light green
                            'Technology and Ethics': 'rgba(32, 201, 151, 0.8)', // Tech green
                            'Education': 'rgba(40, 167, 69, 0.7)', // Education green
                            'Processing': 'rgba(40, 167, 69, 0.8)', // Standard green
                            'Processed Content': 'rgba(40, 167, 69, 0.8)', // Standard green
                            default: 'rgba(40, 167, 69, 0.7)' // Default green
                        };
                        
                        return categoryColors[chunk.category] || categoryColors.default;
                    }
                    
                    // Fallback for unknown status
                    return 'rgba(108, 117, 125, 0.5)';
                };

                const treemapData = {
                    datasets: [{
                        label: 'Document Chunks',
                        tree: chunks,
                        key: 'size', // Use chunk text length as size
                        // Remove groups to show individual chunks
                        backgroundColor: (c) => {
                            if (c.raw && c.raw._data) {
                                return getCategoryColor(c.raw._data);
                            }
                            return 'rgba(107, 114, 128, 0.7)';
                        },
                        borderColor: 'rgba(13, 17, 23, 1)',
                        borderWidth: 1,
                        spacing: 0.5,
                        labels: {
                            display: true,
                            align: 'center',
                            position: 'middle',
                            font: {
                                size: 10
                            },
                            color: 'white',
                            formatter: (c) => {
                                if (c.raw && c.raw._data) {
                                    const chunk = c.raw._data;
                                    // Show chunk number for completed chunks, status for others
                                    if (chunk.status === 'processing' || chunk.isCurrentlyProcessing) {
                                        return '‚ü≥';
                                    } else if (chunk.status === 'pending') {
                                        return (chunk.index + 1).toString();
                                    } else {
                                        return (chunk.index + 1).toString();
                                    }
                                }
                                return '';
                            }
                        },
                    }]
                };

                treemapChart = new Chart(ctx, {
                    type: 'treemap',
                    data: treemapData,
                    options: {
                        responsive: true,
                        maintainAspectRatio: false,
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                backgroundColor: 'rgba(31, 41, 55, 0.95)',
                                titleColor: 'white',
                                bodyColor: 'white',
                                borderColor: 'rgba(75, 85, 99, 0.8)',
                                borderWidth: 1,
                                callbacks: {
                                    title: (items) => {
                                        if (items && items[0] && items[0].raw && items[0].raw._data) {
                                            const chunk = items[0].raw._data;
                                            const statusIcon = chunk.status === 'completed' ? '‚úÖ' : 
                                                             chunk.status === 'processing' || chunk.isCurrentlyProcessing ? '‚ü≥' : '‚è≥';
                                            return `${statusIcon} Chunk ${chunk.index + 1}`;
                                        }
                                        return '';
                                    },
                                    label: (item) => {
                                        if (item && item.raw && item.raw._data) {
                                            const chunk = item.raw._data;
                                            const lines = [
                                                `Status: ${chunk.status}`,
                                                `Size: ${item.raw.v.toLocaleString()} chars`,
                                                `Category: ${chunk.category}`
                                            ];
                                            
                                            if (chunk.status === 'completed') {
                                                lines.push(`Sentiment: ${chunk.sentiment}`);
                                                lines.push(`Enhanced: ${chunk.contextualSummary ? 'Yes' : 'No'}`);
                                            } else if (chunk.status === 'processing' || chunk.isCurrentlyProcessing) {
                                                lines.push('Currently being processed...');
                                                if (chunk.estimatedTimeRemaining) {
                                                    lines.push(`ETA: ${chunk.estimatedTimeRemaining}`);
                                                }
                                            } else if (chunk.status === 'pending') {
                                                lines.push('Waiting to be processed');
                                                if (chunk.estimatedTimeRemaining) {
                                                    lines.push(`ETA: ${chunk.estimatedTimeRemaining}`);
                                                }
                                            }
                                            
                                            lines.push('');
                                            lines.push('Click to view details');
                                            return lines;
                                        }
                                        return '';
                                    },
                                }
                            }
                        },
                        onClick: (e, elements) => {
                            if (elements && elements.length > 0) {
                                const context = elements[0].element.$context;
                                if (context && context.raw && context.raw._data) {
                                    const clickedChunk = context.raw._data;
                                    showChunkModal(clickedChunk);
                                }
                            }
                        }
                    }
                });
                
                console.log(`‚úÖ Treemap created successfully with ${chunks.length} rectangles`);
            }
            
            // Real-time treemap updates for processing documents
            let realTimeUpdateInterval = null;
            
            function startRealTimeTreemapUpdates(docId) {
                // Clear any existing interval
                if (realTimeUpdateInterval) {
                    clearInterval(realTimeUpdateInterval);
                }
                
                console.log(`üîÑ Starting real-time treemap updates for document: ${docId}`);
                
                // Update every 5 seconds
                realTimeUpdateInterval = setInterval(async () => {
                    try {
                        // Find the current document
                        const doc = documents.find(d => d.id === docId);
                        if (!doc || doc.status !== 'processing') {
                            console.log('üõë Document no longer processing, stopping real-time updates');
                            stopRealTimeTreemapUpdates();
                            return;
                        }
                        
                        // Refresh the document data from API
                        console.log('üîÑ Refreshing processing document data...');
                        const inProgressResponse = await fetch('/api/in-progress');
                        if (inProgressResponse.ok) {
                            const inProgressData = await inProgressResponse.json();
                            const updatedSession = inProgressData.find(session => session.id === docId);
                            
                            if (updatedSession) {
                                // Update the document object with latest progress
                                doc.processedChunks = updatedSession.processedChunks || 0;
                                doc.currentProcessingChunk = (updatedSession.processedChunks || 0) + 1;
                                doc.progress = Math.round((doc.processedChunks / doc.chunkCount) * 100);
                                
                                console.log(`üìä Updated progress: ${doc.processedChunks}/${doc.chunkCount} (${doc.progress}%), current chunk: ${doc.currentProcessingChunk}`);
                                
                                // Reload chunks with updated progress
                                const updatedChunks = await loadProcessingDocumentChunks(doc);
                                
                                // Update stats
                                const processingChunks = updatedChunks.filter(c => c.status === 'processing').length;
                                const completedChunks = updatedChunks.filter(c => c.status === 'completed').length;
                                
                                // Update elapsed time
                                let processingTimeText = 'N/A';
                                if (appState.processingStartTimes[doc.id]) {
                                    processingTimeText = formatElapsedTime(appState.processingStartTimes[doc.id]);
                                }
                                
                                document.getElementById('file-total-chunks').textContent = updatedChunks.length.toLocaleString();
                                document.getElementById('file-processing-chunks').textContent = doc.currentProcessingChunk.toString();
                                document.getElementById('file-overall-progress').textContent = `${doc.progress}%`;
                                document.getElementById('file-processing-time').textContent = processingTimeText;
                                
                                // Recreate treemap with updated data
                                createTreemap(updatedChunks);
                                
                                console.log(`‚úÖ Treemap updated: ${completedChunks} completed, ${processingChunks} processing, ${updatedChunks.length - completedChunks - processingChunks} pending`);
                            } else {
                                console.log('üìÑ Processing session completed, document should appear in recent records soon');
                                stopRealTimeTreemapUpdates();
                                
                                // Refresh the main dashboard to show completed document
                                loadDocuments();
                            }
                        }
                    } catch (error) {
                        console.error('‚ùå Error updating real-time treemap:', error);
                    }
                }, 5000); // Update every 5 seconds
            }
            
            function stopRealTimeTreemapUpdates() {
                if (realTimeUpdateInterval) {
                    clearInterval(realTimeUpdateInterval);
                    realTimeUpdateInterval = null;
                    console.log('üõë Real-time treemap updates stopped');
                }
            }

            const modal = document.getElementById('chunk-modal');
            const modalContent = document.getElementById('modal-content');
            const modalTitle = document.getElementById('modal-title');

            function showChunkModal(chunk) {
                modalTitle.textContent = `${chunk.title || `Chunk ${chunk.index + 1}`}`;
                
                const statusColor = chunk.status === 'completed' ? 'text-green-400' : 
                                   chunk.status === 'processing' ? 'text-yellow-400' : 
                                   chunk.status === 'pending' ? 'text-blue-400' : 'text-red-400';

                // Format entities for display
                const formatEntities = (entities) => {
                    if (!entities || typeof entities !== 'object') return 'None';
                    const parts = [];
                    if (entities.people && entities.people.length > 0) {
                        parts.push(`<strong>People:</strong> ${entities.people.join(', ')}`);
                    }
                    if (entities.locations && entities.locations.length > 0) {
                        parts.push(`<strong>Locations:</strong> ${entities.locations.join(', ')}`);
                    }
                    if (entities.organizations && entities.organizations.length > 0) {
                        parts.push(`<strong>Organizations:</strong> ${entities.organizations.join(', ')}`);
                    }
                    return parts.length > 0 ? parts.join('<br>') : 'None';
                };

                modalContent.innerHTML = `
                    <div class="space-y-6">
                        <!-- Processing Pipeline Overview -->
                        <div class="bg-gradient-to-r from-blue-900/30 to-purple-900/30 border border-blue-700/50 rounded-lg p-4">
                            <h3 class="text-lg font-bold text-blue-300 mb-3">üîÑ Processing Pipeline</h3>
                            <div class="grid grid-cols-4 gap-2 text-xs">
                                <div class="text-center">
                                    <div class="w-full h-2 bg-green-500 rounded mb-1"></div>
                                    <span class="text-green-400">1. Extracted</span>
                                </div>
                                <div class="text-center">
                                    <div class="w-full h-2 bg-green-500 rounded mb-1"></div>
                                    <span class="text-green-400">2. AI Analyzed</span>
                                </div>
                                <div class="text-center">
                                    <div class="w-full h-2 ${chunk.contextualSummary ? 'bg-green-500' : 'bg-gray-600'} rounded mb-1"></div>
                                    <span class="${chunk.contextualSummary ? 'text-green-400' : 'text-gray-500'}">3. Contextualized</span>
                                </div>
                                <div class="text-center">
                                    <div class="w-full h-2 bg-green-500 rounded mb-1"></div>
                                    <span class="text-green-400">4. Embedded</span>
                                </div>
                            </div>
                        </div>

                        <!-- Chunk Metadata -->
                        <div class="grid grid-cols-2 gap-4 text-sm">
                            <div>
                                <p><span class="font-semibold text-gray-400">Status:</span> <span class="font-bold ${statusColor} capitalize">${chunk.processingStatus || chunk.status}</span></p>
                                <p><span class="font-semibold text-gray-400">Size:</span> ${chunk.size.toLocaleString()} chars</p>
                                <p><span class="font-semibold text-gray-400">Index:</span> ${chunk.index + 1}</p>
                            </div>
                            <div>
                                <p><span class="font-semibold text-gray-400">Category:</span> ${chunk.category}</p>
                                <p><span class="font-semibold text-gray-400">Sentiment:</span> <span class="capitalize">${chunk.sentiment}</span></p>
                                <p><span class="font-semibold text-gray-400">Technical Level:</span> ${chunk.technicalLevel}</p>
                            </div>
                        </div>

                        <!-- AI Analysis Results -->
                        <div class="bg-yellow-900/20 border border-yellow-700 rounded-lg p-4">
                            <h4 class="font-bold text-yellow-300 mb-3">ü§ñ AI Analysis Results</h4>
                            
                            ${chunk.summary ? `
                                <div class="mb-3">
                                    <p class="font-semibold text-gray-400 mb-2">Generated Summary:</p>
                                    <p class="text-sm text-gray-300 bg-gray-900/50 p-2 rounded">${chunk.summary}</p>
                                </div>
                            ` : ''}
                            
                            ${chunk.mainTopics && chunk.mainTopics.length > 0 ? `
                                <div class="mb-3">
                                    <p class="font-semibold text-gray-400 mb-1">Main Topics:</p>
                                    <div class="flex flex-wrap gap-1">
                                        ${chunk.mainTopics.map(topic => `<span class="px-2 py-1 bg-blue-600/30 text-blue-300 text-xs rounded">${topic}</span>`).join('')}
                                    </div>
                                </div>
                            ` : ''}
                            
                            ${chunk.emotions && chunk.emotions.length > 0 ? `
                                <div class="mb-3">
                                    <p class="font-semibold text-gray-400 mb-1">Detected Emotions:</p>
                                    <p class="text-sm text-gray-300">${chunk.emotions.join(', ')}</p>
                                </div>
                            ` : ''}
                            
                            <div class="mb-3">
                                <p class="font-semibold text-gray-400 mb-1">Key Entities:</p>
                                <div class="text-sm text-gray-300">${formatEntities(chunk.keyEntities)}</div>
                            </div>
                            
                            ${chunk.tags ? `
                                <div>
                                    <p class="font-semibold text-gray-400 mb-1">Tags:</p>
                                    <p class="text-sm text-gray-300">${chunk.tags}</p>
                                </div>
                            ` : ''}
                        </div>

                        <!-- Contextual Enhancement -->
                        ${chunk.contextualSummary ? `
                            <div class="bg-purple-900/20 border border-purple-700 rounded-lg p-4">
                                <h4 class="font-bold text-purple-300 mb-3">üß† Contextual Enhancement</h4>
                                <p class="text-sm text-purple-200 bg-purple-900/30 p-3 rounded">${chunk.contextualSummary}</p>
                                <p class="text-xs text-purple-400 mt-2">‚ú® This chunk has been enhanced with document-aware contextual embeddings for improved RAG accuracy.</p>
                            </div>
                        ` : `
                            <div class="bg-gray-800/50 border border-gray-600 rounded-lg p-4">
                                <h4 class="font-semibold text-gray-300 mb-2">üß† Contextual Enhancement</h4>
                                <p class="text-sm text-gray-400">This chunk uses standard embeddings without contextual enhancement.</p>
                            </div>
                        `}

                        <!-- Original Content -->
                        <div class="bg-gray-900 rounded-lg p-4">
                            <h4 class="font-bold text-gray-300 mb-3">üìÑ Original Content</h4>
                            <div class="max-h-40 overflow-y-auto bg-black/50 p-3 rounded text-sm">
                                <p class="text-gray-300 whitespace-pre-wrap font-mono leading-relaxed">${chunk.content}</p>
                            </div>
                        </div>

                        <!-- Processing Timestamps -->
                        <div class="bg-gray-800/30 rounded-lg p-3 text-xs text-gray-500 border-t border-gray-700">
                            <div class="grid grid-cols-2 gap-4">
                                ${chunk.createdTime ? `<p><strong>Created:</strong> ${new Date(chunk.createdTime).toLocaleString()}</p>` : ''}
                                ${chunk.processedDate ? `<p><strong>Processed:</strong> ${new Date(chunk.processedDate).toLocaleString()}</p>` : ''}
                            </div>
                            <p class="mt-2 italic">${chunk.log}</p>
                        </div>
                    </div>
                `;
                modal.classList.remove('hidden');
            }

            function hideChunkModal() {
                modal.classList.add('hidden');
            }

            function showModal(modalId) {
                document.getElementById(modalId).classList.remove('hidden');
            }

            function hideModal(modalId) {
                document.getElementById(modalId).classList.add('hidden');
                
                // Reset new content modal state
                if (modalId === 'new-content-modal') {
                    // Reset URL input
                    document.getElementById('content-input').value = '';
                    
                    // Reset file selection
                    selectedFile = null;
                    document.getElementById('file-input').value = '';
                    document.getElementById('selected-file').classList.add('hidden');
                    document.getElementById('drop-zone').classList.remove('hidden');
                    
                    // Reset to URL tab
                    document.getElementById('url-tab').className = 'px-4 py-2 text-sm font-medium text-white border-b-2 border-blue-500 bg-blue-900/20';
                    document.getElementById('file-tab').className = 'px-4 py-2 text-sm font-medium text-gray-400 hover:text-white';
                    document.getElementById('url-section').classList.remove('hidden');
                    document.getElementById('file-section').classList.add('hidden');
                    
                    // Reset processing state
                    document.getElementById('process-btn').disabled = false;
                    document.getElementById('process-btn').textContent = 'Process';
                    document.getElementById('cancel-btn').textContent = 'Cancel';
                    document.getElementById('modal-status').classList.add('hidden');
                    document.getElementById('modal-progress').classList.add('hidden');
                    document.getElementById('modal-progress-steps').innerHTML = '';
                    document.getElementById('modal-progress-bar').style.width = '0%';
                    document.getElementById('modal-progress-percent').textContent = '0%';
                }
            }

            // Handle processing progress updates from SSE
            function updateProcessingProgress(data, statusText, progressBar, progressPercent, progressSteps) {
                console.log('üìä Progress update:', data);
                
                // Update status text
                if (data.message) {
                    statusText.textContent = data.message;
                }
                
                // Update progress bar if progress is provided
                if (data.progress !== null && data.progress !== undefined) {
                    const progress = Math.round(data.progress);
                    progressBar.style.width = `${progress}%`;
                    progressPercent.textContent = `${progress}%`;
                }
                
                // Add step to progress log
                if (data.step && data.message) {
                    const stepElement = document.createElement('div');
                    stepElement.className = 'flex items-start gap-2 text-xs';
                    
                    // Step icon based on type
                    let icon = '‚è≥';
                    if (data.step === 'complete' || data.step === 'success') icon = '‚úÖ';
                    else if (data.step === 'error') icon = '‚ùå';
                    else if (data.step === 'chunk') icon = 'üß©';
                    else if (data.step === 'embedding') icon = 'üß†';
                    else if (data.step === 'analysis') icon = 'ü§ñ';
                    else if (data.step === 'fetch') icon = 'üì•';
                    
                    stepElement.innerHTML = `
                        <span class="flex-shrink-0 mt-0.5">${icon}</span>
                        <span class="text-blue-200">${data.message}</span>
                    `;
                    
                    progressSteps.appendChild(stepElement);
                    
                    // Auto-scroll to bottom
                    progressSteps.scrollTop = progressSteps.scrollHeight;
                }
            }

            // Auto-refresh documents every 30 seconds
            function startAutoRefresh() {
                if (refreshInterval) {
                    clearInterval(refreshInterval);
                }
                
                refreshInterval = setInterval(() => {
                    console.log('üîÑ Auto-refreshing documents...');
                    if (appState.currentView === 'dashboard') {
                        loadDocuments();
                    }
                }, 30000); // 30 seconds
            }

            // Event Listeners for both grids
            const handleCardClick = (e) => {
                const card = e.target.closest('.file-card');
                if (card) {
                    const docId = card.dataset.docId;
                    switchView('file', docId);
                }
            };
            
            document.getElementById('processing-grid').addEventListener('click', handleCardClick);
            document.getElementById('history-grid').addEventListener('click', handleCardClick);
            document.getElementById('files-grid').addEventListener('click', handleCardClick);

            backToDashboardBtn.addEventListener('click', () => switchView('dashboard'));
            document.getElementById('modal-close').addEventListener('click', hideChunkModal);
            
            // Header button event listeners
            document.getElementById('addNewBtn').addEventListener('click', () => showModal('new-content-modal'));
            document.getElementById('settingsBtn').addEventListener('click', () => showModal('settings-modal'));
            
            // Modal close buttons
            document.getElementById('new-modal-close').addEventListener('click', () => hideModal('new-content-modal'));
            document.getElementById('settings-modal-close').addEventListener('click', () => hideModal('settings-modal'));
            document.getElementById('cancel-btn').addEventListener('click', () => hideModal('new-content-modal'));
            document.getElementById('settings-cancel').addEventListener('click', () => hideModal('settings-modal'));
            
            // Tab switching functionality
            let selectedFile = null;
            
            document.getElementById('url-tab').addEventListener('click', () => {
                // Switch to URL tab
                document.getElementById('url-tab').className = 'px-4 py-2 text-sm font-medium text-white border-b-2 border-blue-500 bg-blue-900/20';
                document.getElementById('file-tab').className = 'px-4 py-2 text-sm font-medium text-gray-400 hover:text-white';
                document.getElementById('url-section').classList.remove('hidden');
                document.getElementById('file-section').classList.add('hidden');
                selectedFile = null;
            });
            
            document.getElementById('file-tab').addEventListener('click', () => {
                // Switch to File tab
                document.getElementById('file-tab').className = 'px-4 py-2 text-sm font-medium text-white border-b-2 border-blue-500 bg-blue-900/20';
                document.getElementById('url-tab').className = 'px-4 py-2 text-sm font-medium text-gray-400 hover:text-white';
                document.getElementById('file-section').classList.remove('hidden');
                document.getElementById('url-section').classList.add('hidden');
            });
            
            // File upload functionality
            const dropZone = document.getElementById('drop-zone');
            const fileInput = document.getElementById('file-input');
            const selectedFileDiv = document.getElementById('selected-file');
            const fileName = document.getElementById('file-name');
            const fileSize = document.getElementById('file-size');
            const removeFileBtn = document.getElementById('remove-file');
            
            // Click to browse files
            dropZone.addEventListener('click', () => {
                fileInput.click();
            });
            
            // File input change
            fileInput.addEventListener('change', (e) => {
                if (e.target.files.length > 0) {
                    handleFileSelection(e.target.files[0]);
                }
            });
            
            // Drag and drop functionality
            dropZone.addEventListener('dragover', (e) => {
                e.preventDefault();
                dropZone.classList.add('border-blue-500', 'bg-blue-900/30');
            });
            
            dropZone.addEventListener('dragleave', (e) => {
                e.preventDefault();
                dropZone.classList.remove('border-blue-500', 'bg-blue-900/30');
            });
            
            dropZone.addEventListener('drop', (e) => {
                e.preventDefault();
                dropZone.classList.remove('border-blue-500', 'bg-blue-900/30');
                
                if (e.dataTransfer.files.length > 0) {
                    handleFileSelection(e.dataTransfer.files[0]);
                }
            });
            
            // Remove file functionality
            removeFileBtn.addEventListener('click', () => {
                selectedFile = null;
                fileInput.value = '';
                selectedFileDiv.classList.add('hidden');
                dropZone.classList.remove('hidden');
            });
            
            // Handle file selection
            function handleFileSelection(file) {
                // Validate file type
                const allowedTypes = [
                    'application/pdf',
                    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
                    'application/msword',
                    'application/epub+zip',
                    'application/epub',
                    'application/octet-stream', // Some systems report EPUB as this
                    'text/plain',
                    'text/csv',
                    'text/html',
                    'application/html',
                    'application/xhtml+xml'
                ];
                
                const allowedExtensions = ['.pdf', '.docx', '.doc', '.epub', '.txt', '.csv', '.html'];
                const fileExtension = '.' + file.name.split('.').pop().toLowerCase();
                
                // Check extension first, then MIME type (some browsers report incorrect MIME types)
                if (!allowedExtensions.includes(fileExtension)) {
                    // If extension doesn't match, also check MIME type
                    if (!allowedTypes.includes(file.type)) {
                        alert('Unsupported file type. Please select a PDF, DOCX, EPUB, TXT, CSV, or HTML file.');
                        return;
                    }
                }
                
                // Log for debugging
                console.log(`üìÅ File selected: ${file.name}, Type: ${file.type}, Extension: ${fileExtension}`);
                
                // Validate file size (500MB limit)
                if (file.size > 500 * 1024 * 1024) {
                    alert('File size exceeds 500MB limit. Please select a smaller file.');
                    return;
                }
                
                selectedFile = file;
                fileName.textContent = file.name;
                fileSize.textContent = formatFileSize(file.size);
                selectedFileDiv.classList.remove('hidden');
                dropZone.classList.add('hidden');
            }
            
            function formatFileSize(bytes) {
                if (bytes === 0) return '0 Bytes';
                const k = 1024;
                const sizes = ['Bytes', 'KB', 'MB', 'GB'];
                const i = Math.floor(Math.log(bytes) / Math.log(k));
                return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
            }
            
            // Modal functionality - URL and File processing
            document.getElementById('process-btn').addEventListener('click', async () => {
                // Check if we're in URL or File mode
                const isFileMode = !document.getElementById('file-section').classList.contains('hidden');
                
                if (isFileMode) {
                    // File processing mode
                    if (!selectedFile) {
                        alert('Please select a file to process.');
                        return;
                    }
                    await processFile(selectedFile);
                } else {
                    // URL processing mode
                    const input = document.getElementById('content-input').value.trim();
                    if (!input) {
                        alert('Please enter a URL to process.');
                        return;
                    }
                    await processURL(input);
                }
            });
            
            // Process URL function (existing logic)
            async function processURL(url) {
                console.log(`üöÄ Starting URL processing for: ${url}`);
                
                // Show processing state
                const processBtn = document.getElementById('process-btn');
                const cancelBtn = document.getElementById('cancel-btn');
                const statusDiv = document.getElementById('modal-status');
                const statusText = document.getElementById('modal-status-text');
                const progressDiv = document.getElementById('modal-progress');
                const progressBar = document.getElementById('modal-progress-bar');
                const progressPercent = document.getElementById('modal-progress-percent');
                const progressSteps = document.getElementById('modal-progress-steps');
                
                // Update UI state
                processBtn.disabled = true;
                processBtn.textContent = 'Processing...';
                cancelBtn.textContent = 'Close';
                statusDiv.classList.remove('hidden');
                progressDiv.classList.remove('hidden');
                statusText.textContent = 'Starting URL processing...';
                progressSteps.innerHTML = '';
                
                // Start frequent refreshing during processing
                const processingRefresh = setInterval(() => {
                    loadDocuments();
                }, 3000); // Refresh every 3 seconds during processing
                
                try {
                    // Call the streaming API
                    const response = await fetch('/api/process-url-stream', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({ url: url })
                    });
                    
                    if (!response.ok) {
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }
                    
                    // Handle Server-Sent Events
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    let buffer = '';
                    
                    while (true) {
                        const { done, value } = await reader.read();
                        if (done) break;
                        
                        buffer += decoder.decode(value, { stream: true });
                        const lines = buffer.split('\n');
                        buffer = lines.pop(); // Keep incomplete line in buffer
                        
                        for (const line of lines) {
                            if (line.startsWith('data: ')) {
                                try {
                                    const data = JSON.parse(line.slice(6));
                                    updateProcessingProgress(data, statusText, progressBar, progressPercent, progressSteps);
                                } catch (e) {
                                    console.warn('Failed to parse SSE data:', line);
                                }
                            }
                        }
                    }
                    
                    // Success - refresh dashboard and close modal
                    console.log('‚úÖ Processing completed successfully');
                    statusText.textContent = 'Processing completed! Refreshing dashboard...';
                    
                    // Stop frequent refreshing
                    clearInterval(processingRefresh);
                    
                    // Final refresh to show the completed document
                    loadDocuments();
                    
                    setTimeout(() => {
                        hideModal('new-content-modal');
                    }, 2000);
                    
                } catch (error) {
                    console.error('‚ùå Processing error:', error);
                    statusText.textContent = `Error: ${error.message}`;
                    processBtn.disabled = false;
                    processBtn.textContent = 'Process';
                    
                    // Stop frequent refreshing on error
                    clearInterval(processingRefresh);
                }
            }
            
            // Process File function (new logic)
            async function processFile(file) {
                console.log(`üöÄ Starting file processing for: ${file.name}`);
                
                // Show processing state
                const processBtn = document.getElementById('process-btn');
                const cancelBtn = document.getElementById('cancel-btn');
                const statusDiv = document.getElementById('modal-status');
                const statusText = document.getElementById('modal-status-text');
                const progressDiv = document.getElementById('modal-progress');
                const progressBar = document.getElementById('modal-progress-bar');
                const progressPercent = document.getElementById('modal-progress-percent');
                const progressSteps = document.getElementById('modal-progress-steps');
                
                processBtn.disabled = true;
                processBtn.textContent = 'Processing...';
                cancelBtn.textContent = 'Close';
                statusDiv.classList.remove('hidden');
                progressDiv.classList.remove('hidden');
                statusText.textContent = 'Starting file processing...';
                progressSteps.innerHTML = '';
                
                // Start frequent refreshing during processing
                const processingRefresh = setInterval(() => {
                    loadDocuments();
                }, 3000); // Refresh every 3 seconds during processing
                
                try {
                    // Create FormData for file upload
                    const formData = new FormData();
                    formData.append('file', file);
                    
                    // Call the streaming file processing API
                    const response = await fetch('/api/process-file-stream', {
                        method: 'POST',
                        body: formData
                    });
                    
                    if (!response.ok) {
                        throw new Error('Failed to start file processing');
                    }
                    
                    // Handle Server-Sent Events
                    const reader = response.body.getReader();
                    const decoder = new TextDecoder();
                    
                    while (true) {
                        const { done, value } = await reader.read();
                        if (done) break;
                        
                        const chunk = decoder.decode(value);
                        const lines = chunk.split('\n');
                        
                        for (const line of lines) {
                            if (line.startsWith('data: ')) {
                                try {
                                    const data = JSON.parse(line.slice(6));
                                    console.log('üì¶ SSE Event:', data);
                                    
                                    if (data.event === 'start') {
                                        statusText.textContent = data.data.message;
                                        progressBar.style.width = '5%';
                                        progressPercent.textContent = '5%';
                                    } else if (data.event === 'upload') {
                                        statusText.textContent = data.data.message;
                                        progressBar.style.width = `${data.data.progress}%`;
                                        progressPercent.textContent = `${data.data.progress}%`;
                                        progressSteps.innerHTML += `<div>üì§ ${data.data.message}</div>`;
                                    } else if (data.event === 'parse') {
                                        statusText.textContent = data.data.message;
                                        progressBar.style.width = `${data.data.progress}%`;
                                        progressPercent.textContent = `${data.data.progress}%`;
                                        progressSteps.innerHTML += `<div>üìÑ ${data.data.message}</div>`;
                                    } else if (data.event === 'session') {
                                        statusText.textContent = data.data.message;
                                        progressBar.style.width = `${data.data.progress}%`;
                                        progressPercent.textContent = `${data.data.progress}%`;
                                        progressSteps.innerHTML += `<div>üìä ${data.data.message}</div>`;
                                    } else if (data.event === 'analyze') {
                                        statusText.textContent = data.data.message;
                                        progressBar.style.width = `${data.data.progress || 70}%`;
                                        progressPercent.textContent = `${data.data.progress || 70}%`;
                                        progressSteps.innerHTML += `<div>ü§ñ ${data.data.message}</div>`;
                                    } else if (data.event === 'context') {
                                        progressSteps.innerHTML += `<div>üîç ${data.data.message}</div>`;
                                    } else if (data.event === 'store') {
                                        statusText.textContent = data.data.message;
                                        progressBar.style.width = `${data.data.progress || 85}%`;
                                        progressPercent.textContent = `${data.data.progress || 85}%`;
                                        progressSteps.innerHTML += `<div>üíæ ${data.data.message}</div>`;
                                    } else if (data.event === 'complete') {
                                        statusText.textContent = 'File processing completed!';
                                        progressBar.style.width = '100%';
                                        progressPercent.textContent = '100%';
                                        progressSteps.innerHTML += `<div>‚úÖ ${data.data.message}</div>`;
                                        break;
                                    } else if (data.event === 'error') {
                                        throw new Error(data.data.message);
                                    }
                                    
                                    // Auto-scroll progress steps
                                    progressSteps.scrollTop = progressSteps.scrollHeight;
                                    
                                } catch (parseError) {
                                    console.error('Failed to parse SSE data:', parseError);
                                }
                            }
                        }
                    }
                    
                    // Success - refresh dashboard and close modal
                    console.log('‚úÖ File processing completed successfully');
                    statusText.textContent = 'File processing completed! Refreshing dashboard...';
                    
                    // Stop frequent refreshing
                    clearInterval(processingRefresh);
                    
                    // Final refresh to show the completed document
                    loadDocuments();
                    
                    setTimeout(() => {
                        hideModal('new-content-modal');
                    }, 2000);
                    
                } catch (error) {
                    console.error('‚ùå File processing error:', error);
                    statusText.textContent = `Error: ${error.message}`;
                    processBtn.disabled = false;
                    processBtn.textContent = 'Process';
                    
                    // Stop frequent refreshing on error
                    clearInterval(processingRefresh);
                }
            }
            
            document.getElementById('settings-save').addEventListener('click', () => {
                const interval = document.getElementById('refresh-interval').value;
                const autoRefresh = document.getElementById('auto-refresh').checked;
                const showAnimations = document.getElementById('show-animations').checked;
                
                console.log('Settings saved:', { interval, autoRefresh, showAnimations });
                hideModal('settings-modal');
            });

            modal.addEventListener('click', (e) => {
                if(e.target.id === 'chunk-modal') {
                    hideChunkModal();
                }
            });

            // Close modals on outside click
            document.getElementById('new-content-modal').addEventListener('click', (e) => {
                if(e.target.id === 'new-content-modal') {
                    hideModal('new-content-modal');
                }
            });

            document.getElementById('settings-modal').addEventListener('click', (e) => {
                if(e.target.id === 'settings-modal') {
                    hideModal('settings-modal');
                }
            });


            // Initialize
            console.log('üöÄ AutoLlama Visualizer v2.0 initializing...');
            loadDocuments();
            startAutoRefresh();
            
            // Check Open WebUI status and update all stats periodically (every 30 seconds)
            setInterval(() => {
                checkOpenWebUIStatus();
                updateQdrantStats();
                updateDatabaseStats();
            }, 30000);
        });
    </script>
</body>
</html>